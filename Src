class CorrectedLostInterpreter:
    def __init__(self):
        self.variables = {}
        self.output = []

    def set_variable(self, name, value):
        self.variables[name] = value

    def calculate(self, expression):
        try:
            return eval(expression, {}, self.variables)
        except NameError as ne:
            return f"Error: Variable {ne} is not defined."
        except Exception as e:
            return f"Error: {str(e)}"

    def execute_line(self, line):
        try:
            if "variable" in line and "is set to" in line:
                parts = line.split(" is set to ")
                var_name = parts[0].split()[-1]
                value = parts[1].strip('"')
                if value.isdigit():
                    value = int(value)
                self.set_variable(var_name, value)

            elif "write:" in line:
                expression = line.replace("write:", "").strip()
                for operator, py_operator in [("plus", "+"), ("minus", "-"), ("divide", "/"), ("times", "*"), ("rest", "%")]:
                    expression = expression.replace(operator, py_operator)
                result = self.calculate(expression)
                self.output.append(str(result))

            elif "if" in line:
                condition_block, *else_block = line.split("then")
                condition = condition_block.replace("if", "").strip()
                for key, value in [("exactly", "=="), ("is greater than", ">"), ("is less than", "<"),
                                   ("is in", "in"), ("and", "and"), ("or", "or"), ("not", "not")]:
                    condition = condition.replace(key, value)
                
                # Evaluate the condition
                condition_met = False
                try:
                    condition_met = eval(condition, {}, self.variables)
                except Exception as e:
                    self.output.append(f"Error evaluating condition: {str(e)}")

                if condition_met:
                    statement = else_block[0].strip() if else_block else ''
                    self.execute_line(statement)
                elif else_block:
                    else_statement = else_block[1].strip() if len(else_block) > 1 else ''
                    self.execute_line(else_statement)

        except Exception as e:
            self.output.append(f"Error: {str(e)}")

    def run_all(self, code):
        lines = code.split('\n')
        for line in lines:
            if line.startswith('/:') or 'run(Line)' in line:
                continue
            self.execute_line(line)
        return '\n'.join(self.output)

    def run_line(self, line):
        self.execute_line(line)
        return self.output[-1]

# Example usage with the corrected interpreter
code = """
variable ska is set to 1
write: 9 divide 3
"""

interpreter = CorrectedLostInterpreter()
output = interpreter.run_all(code)
print(output)
